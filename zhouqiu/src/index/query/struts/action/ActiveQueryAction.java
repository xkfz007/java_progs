/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package index.query.struts.action;

import index.query.regex.Regex;
import index.query.replace.Queryjyreplace;
import index.query.replace.Simplereplace;
import index.simp.DAO.SaticleDAO;

import java.io.BufferedReader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.htmlparser.Node;
import org.htmlparser.NodeFilter;
import org.htmlparser.Parser;
import org.htmlparser.filters.AndFilter;
import org.htmlparser.filters.HasChildFilter;
import org.htmlparser.filters.TagNameFilter;
import org.htmlparser.http.ConnectionManager;
import org.htmlparser.lexer.Page;
import org.htmlparser.util.NodeIterator;
import org.htmlparser.util.NodeList;

/**
 * MyEclipse Struts Creation date: 05-09-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="suc" path="Simp.jsp"
 */
public class ActiveQueryAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	int n2 = 0;// http://www.computerapplications.com.cn/网站的第几页
	String equit ="equit";// 判断有多少页
	String equit1 ="equit";// 判断有多少页
	int lastnub =0;//存储一个网站最后一页是多少页
	int first = 0;//记录http://www.computerapplications.com.cn的页数
	String but1 = null;// 获取http://www.ecice06.com/cn/search.asp初次过滤的页面内容
	String but = null;// 获取http://www.computerapplications.com.cn初次过滤的页面内容
	
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		System.out.println("你好这个是Active");
		
		String text = null;//查询的关键字
		String pa = null;//接受页数
		int pagenub = 1;//接受页数转换成整形
		/*
		 * 假设从页面输入的内容不为空
		 */
		if (request.getParameter("value") != null) {
			text = request.getParameter("value");

		}
		/*
		 * 假设页数不为空
		 */
		if (request.getParameter("pa") != null) {
			pa = request.getParameter("pa");
			pagenub = Integer.parseInt(pa);
			
		} 
		/*
		 * 如果为空为第一页
		 */
		else
		{
			pagenub = 1;
		}
		/*
		 * 将页数存入session中
		 */
		request.getSession().setAttribute("pa", pa);
		
		/*
		 * 对接收的关键字进行编号以让字符串识别
		 */
		byte b[] = null;
		
		try {
			b = text.getBytes("ISO-8859-1");
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		text = new String(b);//重新编译后可以显示字符串否则乱码
		
		/*
		 * 与网页内容的提取
		 */
		ConnectionManager manager; // 与网页连接
		String line; // 接收每一行代码
		Simplereplace replace;// 接收修改后每一行代码
		String reline;// 用来接受被修改的一行字符串
		BufferedReader reader = null; // 为了得到readLine()方法进行对页面代码读取
		String regex = null;// 经过过滤之后的字符串
		SaticleDAO saticledao = new SaticleDAO();// 创建SaticleDAO对象来操作存储网页内容
		List list = new ArrayList(); // 接受dao返回的数据，并将数据存入池中
		int n;//网页的页数
		String n1;// 用来接受页数被转换成字符串
		HttpSession session = request.getSession();// 创建一个Session对象存数据
		try {
			/*
			 * 与网页进行连接和提取数据
			 */

			manager = Page.getConnectionManager();
			Parser parser = new Parser(
			manager.openConnection("http://www.ecice06.com/cn/search.asp?page="+ pagenub + "&ks_keyword=" + text + ""));
			parser.setEncoding("GB2312");

			/*
			 * 对网页上的信息进行初次过滤
			 */

			NodeFilter filter = new AndFilter(new TagNameFilter("form"),
					new HasChildFilter(new TagNameFilter("table")));
			NodeList nodelist = parser.parse(filter);
			NodeIterator it = nodelist.elements();
			/*
			 * 过滤后的内容存入but字符串中
			 * 
			 */
			
			while (it.hasMoreNodes()) {

				Node node = (Node) it.nextNode();
				but = node.toHtml();			
			}

			/*
			 * 检测是否到关键词的最后一页
			 */
			if (equit.equals(but) == false) {	
				equit = but; //把后一个网页的内容赋值给equit字符串变量来判断是否达到最后一页
				lastnub = pagenub;//记录最后一页的页数				
				/*
				 * 通过正则表达式提取有用的信息
				 */
				
				regex = Regex.regex(but);
				/*
				 * 封装成BufferedReader类型以便得到readLine()方法
				 */
				reader = new BufferedReader(new StringReader(regex)); 
								
			
			   } 
			
	     else{				
				/*
				 * 当达到第一个网页的最后一页时！！点上一页执行
				 */
	    	  if(lastnub == pagenub)
	    	  {
	    		  System.out.println("可以进入这里");
	    		  regex = Regex.regex(but);
				  reader = new BufferedReader(new StringReader(regex));
				  n2 = 0;	//给第二个网页赋初值			
	    	  }
	    	  else
	    	  {
	    		 
	    		  System.out.println(first);
				/*
				 * 假设点击的是上一页
				 */
				if(first>pagenub)
				{
				 n2--;
				 first = pagenub;
				}				
				/*
				 * 假设点击的是下一页
				 */		   			   
				else
				{ 
					n2++;
					first = pagenub;
					System.out.print(n2);
				}												
				/*
				 * 与网页进行连接和提取数据
				 */
				manager = Page.getConnectionManager();
				parser = new Parser(
				manager.openConnection("http://www.computerapplications.com.cn/cn/search.asp?page="+ n2 + "&ks_keyword=" + text + ""));
				parser.setEncoding("GB2312");
				
				/*
				 * 对网页上的信息进行初次过滤
				 */

				filter = new AndFilter(new TagNameFilter("form"),
						new HasChildFilter(new TagNameFilter("table")));
				nodelist = parser.parse(filter);
				it = nodelist.elements();
				/*
				 * 过滤后的内容
				 */
				
				while (it.hasMoreNodes()) {

					Node node = (Node) it.nextNode();

					but1 = node.toHtml();
				}

				/*
				 * 检测是否到关键词检索的最后一页
				 */
                
				if (equit1.equals(but1) == false) {
					equit1 = but1;

					/*
					 * 通过正则表达式提取有用的信息
					 */
					regex = Regex.regex(but1);
					/*
					 * 输出提取之后的代码 测试输出
					 */
					
					reader = new BufferedReader(new StringReader(regex));

				}
				else
				{
				 /*
				  * 当第一个检索网页的最后一页和第二个检索网页的第一页交替点上一页和下一页时执行
				  */
				 if(n2==1)
			     {
				 /*
				 * 与网页进行连接和提取数据
				 */ 
			       manager = Page.getConnectionManager();
				   parser = new Parser(
				   manager.openConnection("http://www.computerapplications.com.cn/cn/search.asp?page="+ n2 + "&ks_keyword=" + text + ""));
				   parser.setEncoding("GB2312");
					/*
					 * 对网页上的信息进行初次过滤
					 */				
				   filter = new AndFilter(new TagNameFilter("form"),
							new HasChildFilter(new TagNameFilter("table")));
				   nodelist = parser.parse(filter);
			       it = nodelist.elements();
				/*
				* 过滤后的内容
				 */
							
				  while (it.hasMoreNodes()) {

					Node node = (Node) it.nextNode();

					but1 = node.toHtml();
					// but = but.toString();
					}
				/*
				 * 通过正则表达式提取有用的信息
				 */
			 regex = Regex.regex(but1);
				/*
			     * 输出提取之后的代码 测试输出
				*/				
			 reader = new BufferedReader(new StringReader(regex));    		  
			 }
				 else
				 {
					 
					 request.setAttribute("lastpage", "lastpage");
				 }
		  }
	   }
	  }

	     line = reader.readLine();

			/*
			 * 读所有的字符串
			 */
			// replace = new Simplereplace();
			StringBuffer htm = new StringBuffer();// 获取处理后的字符串
			while (line != null)

			{
				/*
				 * 调用替换方法替换页面中".."成"http://www.ecice06.com"
				 */
				reline = Queryjyreplace.replace(line);
				// System.out.println(reline);
				htm.append(reline + '\n'); // 添加到字符串缓存中
				line = reader.readLine();
			}
			reline = htm.toString();
			saticledao.save(reline);

		} catch (Exception e) {
		}

		list = saticledao.getList();// 获取池中的内容
		n = saticledao.getN(); // 获取页数
		n1 = new Integer(n).toString(); // 转换成字符串型
		session.setAttribute("nub", n1);// 将页数存入seesion中
		session.setAttribute("list", list);// 存入session中
		return mapping.findForward("suc");
	}
}