/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package index.query.struts.action;

import index.query.regex.Regex;
import index.query.replace.Simplereplace;
import index.query.struts.form.SimpleForm;
import index.simp.DAO.SaticleDAO;

import java.io.BufferedReader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.htmlparser.Node;
import org.htmlparser.NodeFilter;
import org.htmlparser.Parser;
import org.htmlparser.filters.AndFilter;
import org.htmlparser.filters.HasChildFilter;
import org.htmlparser.filters.TagNameFilter;
import org.htmlparser.http.ConnectionManager;
import org.htmlparser.lexer.Page;
import org.htmlparser.util.NodeIterator;
import org.htmlparser.util.NodeList;

/** 
 * MyEclipse Struts
 * Creation date: 04-15-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="fai" path="/fail.jsp"
 * @struts.action-forward name="suc" path="/suc.jsp"
 */
public class SimpleAction extends Action {
	/*
	 * Generated Methods
	 */

	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		
		SimpleForm queryForm = (SimpleForm) form;
		String text =null;
		
		text = queryForm.getText1();//获得查询的信息
		request.getSession().setAttribute("text",text);//存入查询的数据到Session中
		
		String pa ;
		int pagenub = 1;
		if(request.getParameter("pa") != null)
		{
		 pa = request.getParameter("pa");
		 pagenub = Integer.parseInt(pa);
			
		}
		else
		{
			pagenub = 1;  
		}
		
		/*
		 * 对其进行编码
		 */
		byte b[] = null;
		try {
			b = text.getBytes("ISO-8859-1");
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		text = new String(b);
		
		
		/*
		 * 与网页内容的提取
		 */
		ConnectionManager manager; //与网页连接
		 
		 String but = null;//获取初次过滤的页面内容
		 
		 String line; //接收每一行代码
		 
		 Simplereplace replace;//接收修改后每一行代码
		 
		 String reline;//用来接受被修改的一行字符串
	 	 
		 int i;//循环的次数
	 	 
		 String equit = "equit";//判断有多少页
	   	
		 BufferedReader reader = null; //为了得到readLine()方法进行对页面代码读取
	     
		 String regex = null;//经过过滤之后的字符串
		 SaticleDAO saticledao = new SaticleDAO();//创建SaticleDAO对象来操作存储网页内容
		 List list = new ArrayList(); //接受dao返回的数据，并将数据存入池中
		 int n;//网页的页数
		 String n1;//用来接受页数被转换成字符串
		 HttpSession session = request.getSession();//创建一个Session对象存数据
		 
		 /*
		  * 一个网站一次查询最多能够查询一千条信息出来
		  */
		 
	   	
			try
		 	 {  
				/*
				 * 与网页进行连接和提取数据
				 */
				
				manager = Page.getConnectionManager();
			    Parser parser = new Parser(manager.openConnection
			    	("http://www.ecice06.com/cn/search.asp?page="+pagenub+"&ks_keyword="+text+""));
			    parser.setEncoding("GB2312");

                /*
			    * 对网页上的信息进行初次过滤
			    */
			    
			    NodeFilter filter = new AndFilter(new TagNameFilter("form"),
						new HasChildFilter(new TagNameFilter("table")));
				NodeList nodelist=parser.parse(filter);
				NodeIterator it=nodelist.elements();
				/*
				 * 过滤后的内容
				 */
				while(it.hasMoreNodes()){
					
					Node node=(Node)it.nextNode();
					
					 but = node.toHtml();
					// but = but.toString();
					 
					 
				}
				
				/*
				 *检测是否提取所有查询出来的网页信息 
				 */
				
				if(equit.equals(but) == false)
				{
					equit = but;
					
					
					/*
					 * 通过正则表达式提取有用的信息
					 */
					
					regex = Regex.regex(but);
					/*
					 * 输出提取之后的代码 测试输出
					 */
					//System.out.print(but);
					
				    reader =  new BufferedReader(new StringReader(regex));
					
				}
				
				
				line = reader.readLine();
				
				/*
				 * 读所有的字符串
				 */
				replace = new Simplereplace();
				StringBuffer htm = new StringBuffer();//获取处理后的字符串
				while(line!= null)
					
				{   		
					/*
					 * 调用替换方法替换页面中".."成"http://www.ecice06.com"
					 */
				    reline =replace.replace(line); 
					//System.out.println(reline);
				     htm.append(reline+'\n'); //添加到字符串缓存中
					 line = reader.readLine();
				}
				reline = htm.toString();
				saticledao.save(reline);
				
			}
			catch(Exception e)
			{}
			
		
	   	  list = saticledao.getList();//获取池中的内容
	   	  n = saticledao.getN(); //获取页数
	   	  n1 = new Integer(n).toString(); //转换成字符串型
	   	  session.setAttribute("nub",n1);//将页数存入seesion中
	   	  session.setAttribute("list",list);//存入session中
	   	System.out.print("fdsafd");
		  return mapping.findForward("suc");      			   				 
		
	}
}